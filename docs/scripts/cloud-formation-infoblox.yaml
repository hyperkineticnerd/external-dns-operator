Description:  Deploys a VPC, with two public subnets and Infoblox vNIOS instance.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String
    # as per vNIOS guide, subnet CIDR has to be different (smaller) than VPC one
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String
    # as per vNIOS guide, subnet CIDR has to be different (smaller) than VPC one
    Default: 10.0.2.0/24

  NiosAMI:
    Description: Please enter the AMI for NIOS instance
    Type: String
    # AWS Marketplace > Manage subscriptions > Infoblox vNIOS for DNS, DHCP and IPAM > Launch new instance
    Default: ami-0c1279bff9b1be7f4

  NiosKeyPair:
    Description: Please enter the keypair for NIOS instance
    Type: String

  GridAdminPassword:
    Description: Please enter the Grid admin password
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # as per vNIOS guide, Infoblox VM has to have the access to both subnets, so they have to be from the same AZ
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Infoblox NIOS security group"
      GroupDescription: "SSH, DNS, DHCP, HTTPS, GRID ports"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '67'
          ToPort: '68'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '1194'
          ToPort: '1194'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '2114'
          ToPort: '2114'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ElasticIPPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref Eth1
      AllocationId: !GetAtt [ElasticIP, AllocationId]

  Eth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      SubnetId: !Ref PublicSubnet1
      GroupSet: [!Ref 'InstanceSecurityGroup']

  Eth1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth1
      SubnetId: !Ref PublicSubnet2
      GroupSet: [!Ref 'InstanceSecurityGroup']

  NIOSInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref NiosAMI
      InstanceType: r4.large
      KeyName: !Ref NiosKeyPair
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref Eth0
        - DeviceIndex: "1"
          NetworkInterfaceId: !Ref Eth1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '250'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      UserData:
        Fn::Base64: !Sub |
          #infoblox-config
          remote_console_enabled: y
          default_admin_password: ${GridAdminPassword}
          temp_license: enterprise dns dhcp cloud nios IB-V825

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet 2
    Value: !Ref PublicSubnet2

  InstanceSecurityGroup:
    Description: A reference to the instance security group
    Value: !Ref InstanceSecurityGroup

  InstanceId:
    Description: NIOS instance ID
    Value: !Ref NIOSInstance

  ElasticIP:
    Description: Public IP of NIOS instance
    Value: !Ref ElasticIP
